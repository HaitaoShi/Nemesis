---
title: "TF_IDF_Nemesis_Market"
format: 
  html:
    code-fold: true
    code-tools: true
---

## The concept of [TF-IDF](https://en.wikipedia.org/wiki/Tf%E2%80%93idf) is based on [Zipf's Law](https://en.wikipedia.org/wiki/Zipf%27s_law)

## Load Packages and data

```{r}
#| label: load-packages_data
#| warning: false
#| code-fold: true

library(tidyverse)
library(forcats)
library(stringr)
library(tidytext)
library(igraph)
library(ggraph)
library(ggrepel)

data  <-  read_csv("/Users/shihaitao/Documents/DarknetProject/Nemesis/complete.csv")
```

## Several steps to get data ready for analysis

```{r}
#| label: data_preparation
#| code-fold: false
word_only <- data %>% 
  select("Drug_Type_L", "MainContent") %>% # <1>
  group_by(Drug_Type_L) %>% # <2>
  summarise(Type_Content=paste(MainContent,collapse = "")) %>% # <2> 
  slice(c(-6, -11)) %>% # <3>
  unnest_tokens(word, Type_Content) %>% # <4>  
  mutate(word = str_remove_all(word, "\\d+")) %>% # <4> 
  mutate(word = str_remove_all(word, "mg|g|ml|l")) %>%  # <4> 
  filter(word != "") %>% # <4> 
  count(Drug_Type_L, word, sort = TRUE) %>% # <5> 
  ungroup()
```

1.  Select the columns "Drug_Type_L" and "MainContent" from the data frame "data"
2.  Group the data by "Drug_Type_L" and concatenate the "MainContent" strings for each group into a single string
3.  Remove the 6th and 11th rows from the resulting data frame (NA and Other)
4.  Split the concatenated strings into individual words and remove all digits, units (mg, g, ml, l) and empty value
5.  Count the frequency of each word for each group, and sort the results in descending order

## 

```{r}
#| code-fold: false
custom_stopwords <- tibble(word=c("mg"), lexicon="custom")
StopWords <- bind_rows(stop_words, custom_stopwords)

Top10 <- word_only[-11,] %>% unnest_tokens(word,Type_Content) %>% anti_join(StopWords) %>% group_by(Drug_Type_L) %>% count(word,sort = TRUE) %>% mutate(fre=n/sum(n)) %>% mutate(word=reorder(word,n)) %>% slice_head(n=10) %>% ungroup() %>% select(-fre)  
```

 


## Visualisation
```{r}

list_network <- graph.data.frame(Top10, directed=FALSE)
list_adjacency_network <- get.adjacency(list_network, attr="n", sparse=FALSE)

layout <- layout_with_fr(list_network)  # 计算节点的坐标

plot(list_network, edge.width = list_network$n, vertex.size = 0, vertex.cex = 0.8, layout = layout)  # 使用计

 
```


## 交互式
```{r}

tkplot(list_network, edge.width = E(list_network)$n/10, vertex.size = 0, vertex.cex = 0.8)  # 使用边的属性n来设置边的粗细

# 在交互式绘图窗口中手动调整节点的位置，避免文字交叠


```

